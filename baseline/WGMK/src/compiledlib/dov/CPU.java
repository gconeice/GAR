package compiledlib.dov;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.SecureMap;
import oram.CircuitOram;
import oram.Register;
import oram.Memory;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.Comparator;
import java.lang.reflect.Array;
import flexsc.IWritable;
public class CPU<t__T> implements flexsc.IWritable<CPU<t__T>, t__T> {

	public CompEnv<t__T> env;
	public IntegerLib<t__T> intLib;
	public FloatLib<t__T> floatLib;

	public CPU(CompEnv<t__T> env) throws Exception {
		this.env = env;
		this.intLib = new IntegerLib<t__T>(env);
		this.floatLib = new FloatLib<t__T>(env, 24, 8);
	}

	public int numBits() {
		return 0;
	}
	public t__T[] getBits() {
		t__T[] ret = env.newTArray(this.numBits());
		t__T[] tmp_b;
		t__T tmp;
		int now = 0;
		return ret;
}

	public CPU<t__T> newObj(t__T[] data) throws Exception {
		if(data == null) {
			data = env.newTArray(this.numBits());
			for(int i=0; i<this.numBits(); ++i) { data[i] = intLib.SIGNAL_ZERO; }
		}
		if(data.length != this.numBits()) return null;
		CPU<t__T> ret = new CPU<t__T>(env);
		t__T[] tmp;
		int now = 0;
		return ret;
}

	public t__T[] checkType(t__T[] opcode) throws Exception {
		t__T[] ret = intLib.toSignals(0, 2);
		int f_tmp_0 = 0;
		int __tmp0 = f_tmp_0;
		t__T[] f_tmp_2 = intLib.toSignals(__tmp0, 32);
		t__T f_tmp_1 = intLib.eq(opcode, f_tmp_2);
		t__T __tmp1 = f_tmp_1;
		int f_tmp_3 = 1;
		int __tmp2 = f_tmp_3;
		t__T[] f_tmp_5 = intLib.toSignals(__tmp2, 2);
		t__T[] __tmp3 = intLib.mux(ret, f_tmp_5,__tmp1);
		ret = __tmp3;
		t__T f_tmp_6 = intLib.not(__tmp1);
		t__T __tmp4 = f_tmp_6;
		int f_tmp_7 = 9;
		int __tmp5 = f_tmp_7;
		t__T[] f_tmp_9 = intLib.toSignals(__tmp5, 32);
		t__T f_tmp_8 = intLib.eq(opcode, f_tmp_9);
		t__T __tmp6 = f_tmp_8;
		int f_tmp_10 = 2;
		int __tmp7 = f_tmp_10;
		t__T[] f_tmp_12 = intLib.toSignals(__tmp7, 32);
		t__T f_tmp_11 = intLib.eq(opcode, f_tmp_12);
		t__T __tmp8 = f_tmp_11;
		int f_tmp_13 = 15;
		int __tmp9 = f_tmp_13;
		t__T[] f_tmp_15 = intLib.toSignals(__tmp9, 32);
		t__T f_tmp_14 = intLib.eq(opcode, f_tmp_15);
		t__T __tmp10 = f_tmp_14;
		t__T f_tmp_16 = intLib.or(__tmp8,__tmp10);
		t__T __tmp11 = f_tmp_16;
		t__T f_tmp_17 = intLib.or(__tmp6,__tmp11);
		t__T __tmp12 = f_tmp_17;
		t__T f_tmp_18 = intLib.and(__tmp4,__tmp12);
		t__T __tmp13 = f_tmp_18;
		int f_tmp_19 = 2;
		int __tmp14 = f_tmp_19;
		t__T[] f_tmp_21 = intLib.toSignals(__tmp14, 2);
		t__T[] __tmp15 = intLib.mux(ret, f_tmp_21,__tmp13);
		ret = __tmp15;
		t__T f_tmp_22 = intLib.not(__tmp12);
		t__T __tmp16 = f_tmp_22;
		t__T f_tmp_23 = intLib.and(__tmp4,__tmp16);
		t__T __tmp17 = f_tmp_23;
		int f_tmp_24 = 3;
		int __tmp18 = f_tmp_24;
		t__T[] f_tmp_26 = intLib.toSignals(__tmp18, 2);
		t__T[] __tmp19 = intLib.mux(ret, f_tmp_26,__tmp17);
		ret = __tmp19;
		return ret;

	}
	public t__T[] function(Register<t__T> reg, t__T[] inst, t__T[] pc, t__T terminationBit, int[] masks) throws Exception {
		int ff = 0;
		t__T[] op = intLib.toSignals(0, 32);
		t__T[] rt = intLib.toSignals(0, 32);
		t__T[] rs = intLib.toSignals(0, 32);
		t__T[] rd = intLib.toSignals(0, 32);
		t__T[] shamt = intLib.toSignals(0, 32);
		t__T[] reg_rs = intLib.toSignals(0, 32);
		t__T[] reg_rt = intLib.toSignals(0, 32);
		t__T[] reg_rd = intLib.toSignals(0, 32);
		t__T[] unsignExt = intLib.toSignals(0, 32);
		t__T[] zeroExt = intLib.toSignals(0, 32);
		t__T[] funct = intLib.toSignals(0, 32);
		t__T[] op_type = intLib.toSignals(0, 2);
		t__T[] oldPC = intLib.toSignals(0, 32);
		t__T[] n31 = intLib.toSignals(0, 32);
		t__T[] tmpdata = intLib.toSignals(0, 32);
		t__T[] to_write_index = intLib.toSignals(0, 32);
		t__T[] to_write_content = intLib.toSignals(0, 32);
		int f_tmp_27 = -1;
		int __tmp20 = f_tmp_27;
		ff = __tmp20;
		int f_tmp_28 = 26;
		int __tmp21 = f_tmp_28;
		t__T[] f_tmp_29 = intLib.rightPublicShift(inst, __tmp21);
		t__T[] __tmp22 = f_tmp_29;
		op = __tmp22;
		int f_tmp_30 = 11;
		int __tmp23 = f_tmp_30;
		t__T[] f_tmp_31 = intLib.leftPublicShift(inst, __tmp23);
		t__T[] __tmp24 = f_tmp_31;
		int f_tmp_32 = 27;
		int __tmp25 = f_tmp_32;
		t__T[] f_tmp_33 = intLib.rightPublicShift(__tmp24, __tmp25);
		t__T[] __tmp26 = f_tmp_33;
		rt = __tmp26;
		int f_tmp_34 = 6;
		int __tmp27 = f_tmp_34;
		t__T[] f_tmp_35 = intLib.leftPublicShift(inst, __tmp27);
		t__T[] __tmp28 = f_tmp_35;
		int f_tmp_36 = 27;
		int __tmp29 = f_tmp_36;
		t__T[] f_tmp_37 = intLib.rightPublicShift(__tmp28, __tmp29);
		t__T[] __tmp30 = f_tmp_37;
		rs = __tmp30;
		int f_tmp_38 = 16;
		int __tmp31 = f_tmp_38;
		t__T[] f_tmp_39 = intLib.leftPublicShift(inst, __tmp31);
		t__T[] __tmp32 = f_tmp_39;
		int f_tmp_40 = 27;
		int __tmp33 = f_tmp_40;
		t__T[] f_tmp_41 = intLib.rightPublicShift(__tmp32, __tmp33);
		t__T[] __tmp34 = f_tmp_41;
		rd = __tmp34;
		int f_tmp_42 = 21;
		int __tmp35 = f_tmp_42;
		t__T[] f_tmp_43 = intLib.leftPublicShift(inst, __tmp35);
		t__T[] __tmp36 = f_tmp_43;
		int f_tmp_44 = 27;
		int __tmp37 = f_tmp_44;
		t__T[] f_tmp_45 = intLib.rightPublicShift(__tmp36, __tmp37);
		t__T[] __tmp38 = f_tmp_45;
		shamt = __tmp38;
		int f_tmp_46 = 16;
		int __tmp39 = f_tmp_46;
		t__T[] f_tmp_47 = intLib.leftPublicShift(inst, __tmp39);
		t__T[] __tmp40 = f_tmp_47;
		int f_tmp_48 = 16;
		int __tmp41 = f_tmp_48;
		t__T[] f_tmp_49 = intLib.rightPublicShift(__tmp40, __tmp41);
		t__T[] __tmp42 = f_tmp_49;
		unsignExt = __tmp42;
		zeroExt = unsignExt;
		int f_tmp_50 = 26;
		int __tmp43 = f_tmp_50;
		t__T[] f_tmp_51 = intLib.leftPublicShift(inst, __tmp43);
		t__T[] __tmp44 = f_tmp_51;
		int f_tmp_52 = 26;
		int __tmp45 = f_tmp_52;
		t__T[] f_tmp_53 = intLib.rightPublicShift(__tmp44, __tmp45);
		t__T[] __tmp46 = f_tmp_53;
		funct = __tmp46;
		int f_tmp_54 = 15;
		int __tmp47 = f_tmp_54;
		t__T[] f_tmp_55 = intLib.rightPublicShift(unsignExt, __tmp47);
		t__T[] __tmp48 = f_tmp_55;
		int f_tmp_56 = 0;
		int __tmp49 = f_tmp_56;
		t__T[] f_tmp_58 = intLib.toSignals(__tmp49, 32);
		t__T f_tmp_57 = intLib.not(intLib.eq(__tmp48, f_tmp_58));
		t__T __tmp50 = f_tmp_57;
		int f_tmp_59 = -65536;
		int __tmp51 = f_tmp_59;
		t__T[] f_tmp_61 = intLib.toSignals(__tmp51, 32);
		t__T[] f_tmp_60 = intLib.add(unsignExt,f_tmp_61);
		t__T[] __tmp52 = f_tmp_60;
		t__T[] __tmp53 = intLib.mux(unsignExt, __tmp52,__tmp50);
		unsignExt = __tmp53;
		t__T[] f_tmp_63 = reg.read(rs, ff);
		t__T[] __tmp54 = f_tmp_63;
		reg_rs = __tmp54;
		t__T[] f_tmp_64 = reg.read(rt, ff);
		t__T[] __tmp55 = f_tmp_64;
		reg_rt = __tmp55;
		t__T[] f_tmp_65 = this.checkType(op);
		t__T[] __tmp56 = f_tmp_65;
		op_type = __tmp56;
		int f_tmp_66 = 2;
		int __tmp57 = f_tmp_66;
		t__T[] f_tmp_68 = intLib.toSignals(__tmp57, 2);
		t__T f_tmp_67 = intLib.eq(op_type, f_tmp_68);
		t__T __tmp58 = f_tmp_67;
		int f_tmp_69 = 9;
		int __tmp59 = f_tmp_69;
		t__T[] f_tmp_71 = intLib.toSignals(__tmp59, 32);
		t__T f_tmp_70 = intLib.eq(op, f_tmp_71);
		t__T __tmp60 = f_tmp_70;
		t__T f_tmp_72 = intLib.and(__tmp58,__tmp60);
		t__T __tmp61 = f_tmp_72;
		t__T[] f_tmp_73 = intLib.add(reg_rs,unsignExt);
		t__T[] __tmp62 = f_tmp_73;
		t__T[] __tmp63 = intLib.mux(reg_rt, __tmp62,__tmp61);
		reg_rt = __tmp63;
		t__T f_tmp_75 = intLib.not(__tmp60);
		t__T __tmp64 = f_tmp_75;
		t__T f_tmp_76 = intLib.and(__tmp58,__tmp64);
		t__T __tmp65 = f_tmp_76;
		int f_tmp_77 = 12;
		int __tmp66 = f_tmp_77;
		t__T[] f_tmp_79 = intLib.toSignals(__tmp66, 32);
		t__T f_tmp_78 = intLib.eq(op, f_tmp_79);
		t__T __tmp67 = f_tmp_78;
		t__T f_tmp_80 = intLib.and(__tmp65,__tmp67);
		t__T __tmp68 = f_tmp_80;
		t__T[] f_tmp_81 = intLib.and(reg_rs,zeroExt);
		t__T[] __tmp69 = f_tmp_81;
		t__T[] __tmp70 = intLib.mux(reg_rt, __tmp69,__tmp68);
		reg_rt = __tmp70;
		t__T f_tmp_83 = intLib.not(__tmp67);
		t__T __tmp71 = f_tmp_83;
		t__T f_tmp_84 = intLib.and(__tmp65,__tmp71);
		t__T __tmp72 = f_tmp_84;
		int f_tmp_85 = 15;
		int __tmp73 = f_tmp_85;
		t__T[] f_tmp_87 = intLib.toSignals(__tmp73, 32);
		t__T f_tmp_86 = intLib.eq(op, f_tmp_87);
		t__T __tmp74 = f_tmp_86;
		t__T f_tmp_88 = intLib.and(__tmp72,__tmp74);
		t__T __tmp75 = f_tmp_88;
		int f_tmp_89 = 16;
		int __tmp76 = f_tmp_89;
		t__T[] f_tmp_90 = intLib.leftPublicShift(zeroExt, __tmp76);
		t__T[] __tmp77 = f_tmp_90;
		t__T[] __tmp78 = intLib.mux(reg_rt, __tmp77,__tmp75);
		reg_rt = __tmp78;
		t__T f_tmp_92 = intLib.not(__tmp74);
		t__T __tmp79 = f_tmp_92;
		t__T f_tmp_93 = intLib.and(__tmp72,__tmp79);
		t__T __tmp80 = f_tmp_93;
		int f_tmp_94 = 10;
		int __tmp81 = f_tmp_94;
		t__T[] f_tmp_96 = intLib.toSignals(__tmp81, 32);
		t__T f_tmp_95 = intLib.eq(op, f_tmp_96);
		t__T __tmp82 = f_tmp_95;
		t__T f_tmp_97 = intLib.and(__tmp80,__tmp82);
		t__T __tmp83 = f_tmp_97;
		t__T f_tmp_98 = intLib.not(intLib.geq(reg_rs, unsignExt));
		t__T __tmp84 = f_tmp_98;
		t__T f_tmp_99 = intLib.and(__tmp83,__tmp84);
		t__T __tmp85 = f_tmp_99;
		int f_tmp_100 = 1;
		int __tmp86 = f_tmp_100;
		t__T[] f_tmp_102 = intLib.toSignals(__tmp86, 32);
		t__T[] __tmp87 = intLib.mux(reg_rt, f_tmp_102,__tmp85);
		reg_rt = __tmp87;
		t__T f_tmp_103 = intLib.not(__tmp84);
		t__T __tmp88 = f_tmp_103;
		t__T f_tmp_104 = intLib.and(__tmp83,__tmp88);
		t__T __tmp89 = f_tmp_104;
		int f_tmp_105 = 0;
		int __tmp90 = f_tmp_105;
		t__T[] f_tmp_107 = intLib.toSignals(__tmp90, 32);
		t__T[] __tmp91 = intLib.mux(reg_rt, f_tmp_107,__tmp89);
		reg_rt = __tmp91;
		t__T f_tmp_108 = intLib.not(__tmp58);
		t__T __tmp92 = f_tmp_108;
		int f_tmp_109 = 1;
		int __tmp93 = f_tmp_109;
		t__T[] f_tmp_111 = intLib.toSignals(__tmp93, 2);
		t__T f_tmp_110 = intLib.eq(op_type, f_tmp_111);
		t__T __tmp94 = f_tmp_110;
		t__T f_tmp_112 = intLib.and(__tmp92,__tmp94);
		t__T __tmp95 = f_tmp_112;
		int f_tmp_113 = 33;
		int __tmp96 = f_tmp_113;
		t__T[] f_tmp_115 = intLib.toSignals(__tmp96, 32);
		t__T f_tmp_114 = intLib.eq(funct, f_tmp_115);
		t__T __tmp97 = f_tmp_114;
		t__T f_tmp_116 = intLib.and(__tmp95,__tmp97);
		t__T __tmp98 = f_tmp_116;
		t__T[] f_tmp_117 = intLib.add(reg_rs,reg_rt);
		t__T[] __tmp99 = f_tmp_117;
		t__T[] __tmp100 = intLib.mux(reg_rd, __tmp99,__tmp98);
		reg_rd = __tmp100;
		t__T f_tmp_119 = intLib.not(__tmp97);
		t__T __tmp101 = f_tmp_119;
		t__T f_tmp_120 = intLib.and(__tmp95,__tmp101);
		t__T __tmp102 = f_tmp_120;
		int f_tmp_121 = 38;
		int __tmp103 = f_tmp_121;
		t__T[] f_tmp_123 = intLib.toSignals(__tmp103, 32);
		t__T f_tmp_122 = intLib.eq(funct, f_tmp_123);
		t__T __tmp104 = f_tmp_122;
		t__T f_tmp_124 = intLib.and(__tmp102,__tmp104);
		t__T __tmp105 = f_tmp_124;
		t__T[] f_tmp_125 = intLib.xor(reg_rs,reg_rt);
		t__T[] __tmp106 = f_tmp_125;
		t__T[] __tmp107 = intLib.mux(reg_rd, __tmp106,__tmp105);
		reg_rd = __tmp107;
		t__T f_tmp_127 = intLib.not(__tmp104);
		t__T __tmp108 = f_tmp_127;
		t__T f_tmp_128 = intLib.and(__tmp102,__tmp108);
		t__T __tmp109 = f_tmp_128;
		int f_tmp_129 = 42;
		int __tmp110 = f_tmp_129;
		t__T[] f_tmp_131 = intLib.toSignals(__tmp110, 32);
		t__T f_tmp_130 = intLib.eq(funct, f_tmp_131);
		t__T __tmp111 = f_tmp_130;
		t__T f_tmp_132 = intLib.and(__tmp109,__tmp111);
		t__T __tmp112 = f_tmp_132;
		t__T f_tmp_133 = intLib.not(intLib.geq(reg_rs, reg_rt));
		t__T __tmp113 = f_tmp_133;
		t__T f_tmp_134 = intLib.and(__tmp112,__tmp113);
		t__T __tmp114 = f_tmp_134;
		int f_tmp_135 = 1;
		int __tmp115 = f_tmp_135;
		t__T[] f_tmp_137 = intLib.toSignals(__tmp115, 32);
		t__T[] __tmp116 = intLib.mux(reg_rd, f_tmp_137,__tmp114);
		reg_rd = __tmp116;
		t__T f_tmp_138 = intLib.not(__tmp113);
		t__T __tmp117 = f_tmp_138;
		t__T f_tmp_139 = intLib.and(__tmp112,__tmp117);
		t__T __tmp118 = f_tmp_139;
		int f_tmp_140 = 0;
		int __tmp119 = f_tmp_140;
		t__T[] f_tmp_142 = intLib.toSignals(__tmp119, 32);
		t__T[] __tmp120 = intLib.mux(reg_rd, f_tmp_142,__tmp118);
		reg_rd = __tmp120;
		t__T f_tmp_143 = intLib.not(__tmp111);
		t__T __tmp121 = f_tmp_143;
		t__T f_tmp_144 = intLib.and(__tmp109,__tmp121);
		t__T __tmp122 = f_tmp_144;
		int f_tmp_145 = 35;
		int __tmp123 = f_tmp_145;
		t__T[] f_tmp_147 = intLib.toSignals(__tmp123, 32);
		t__T f_tmp_146 = intLib.eq(funct, f_tmp_147);
		t__T __tmp124 = f_tmp_146;
		t__T f_tmp_148 = intLib.and(__tmp122,__tmp124);
		t__T __tmp125 = f_tmp_148;
		t__T[] f_tmp_149 = intLib.sub(reg_rs,reg_rt);
		t__T[] __tmp126 = f_tmp_149;
		t__T[] __tmp127 = intLib.mux(reg_rd, __tmp126,__tmp125);
		reg_rd = __tmp127;
		t__T f_tmp_151 = intLib.not(__tmp124);
		t__T __tmp128 = f_tmp_151;
		t__T f_tmp_152 = intLib.and(__tmp122,__tmp128);
		t__T __tmp129 = f_tmp_152;
		int f_tmp_153 = 2;
		int __tmp130 = f_tmp_153;
		t__T[] f_tmp_155 = intLib.toSignals(__tmp130, 32);
		t__T f_tmp_154 = intLib.eq(funct, f_tmp_155);
		t__T __tmp131 = f_tmp_154;
		t__T f_tmp_156 = intLib.and(__tmp129,__tmp131);
		t__T __tmp132 = f_tmp_156;
		t__T[] f_tmp_157 = intLib.rightPrivateShift(reg_rt, shamt);
		t__T[] __tmp133 = f_tmp_157;
		t__T[] __tmp134 = intLib.mux(reg_rd, __tmp133,__tmp132);
		reg_rd = __tmp134;
		t__T f_tmp_159 = intLib.not(__tmp131);
		t__T __tmp135 = f_tmp_159;
		t__T f_tmp_160 = intLib.and(__tmp129,__tmp135);
		t__T __tmp136 = f_tmp_160;
		int f_tmp_161 = 3;
		int __tmp137 = f_tmp_161;
		t__T[] f_tmp_163 = intLib.toSignals(__tmp137, 32);
		t__T f_tmp_162 = intLib.eq(funct, f_tmp_163);
		t__T __tmp138 = f_tmp_162;
		t__T f_tmp_164 = intLib.and(__tmp136,__tmp138);
		t__T __tmp139 = f_tmp_164;
		t__T[] f_tmp_165 = intLib.SRA(reg_rt, shamt);
		t__T[] __tmp140 = f_tmp_165;
		t__T[] __tmp141 = intLib.mux(reg_rd, __tmp140,__tmp139);
		reg_rd = __tmp141;
		t__T f_tmp_167 = intLib.not(__tmp138);
		t__T __tmp142 = f_tmp_167;
		t__T f_tmp_168 = intLib.and(__tmp136,__tmp142);
		t__T __tmp143 = f_tmp_168;
		int f_tmp_169 = 0;
		int __tmp144 = f_tmp_169;
		t__T[] f_tmp_171 = intLib.toSignals(__tmp144, 32);
		t__T f_tmp_170 = intLib.eq(funct, f_tmp_171);
		t__T __tmp145 = f_tmp_170;
		t__T f_tmp_172 = intLib.and(__tmp143,__tmp145);
		t__T __tmp146 = f_tmp_172;
		t__T[] f_tmp_173 = intLib.leftPrivateShift(reg_rt, shamt);
		t__T[] __tmp147 = f_tmp_173;
		t__T[] __tmp148 = intLib.mux(reg_rd, __tmp147,__tmp146);
		reg_rd = __tmp148;
		t__T f_tmp_175 = intLib.not(__tmp145);
		t__T __tmp149 = f_tmp_175;
		t__T f_tmp_176 = intLib.and(__tmp143,__tmp149);
		t__T __tmp150 = f_tmp_176;
		int f_tmp_177 = 37;
		int __tmp151 = f_tmp_177;
		t__T[] f_tmp_179 = intLib.toSignals(__tmp151, 32);
		t__T f_tmp_178 = intLib.eq(funct, f_tmp_179);
		t__T __tmp152 = f_tmp_178;
		t__T f_tmp_180 = intLib.and(__tmp150,__tmp152);
		t__T __tmp153 = f_tmp_180;
		t__T[] f_tmp_181 = intLib.or(reg_rt,reg_rs);
		t__T[] __tmp154 = f_tmp_181;
		t__T[] __tmp155 = intLib.mux(reg_rd, __tmp154,__tmp153);
		reg_rd = __tmp155;
		t__T f_tmp_183 = intLib.not(__tmp152);
		t__T __tmp156 = f_tmp_183;
		t__T f_tmp_184 = intLib.and(__tmp150,__tmp156);
		t__T __tmp157 = f_tmp_184;
		int f_tmp_185 = 9;
		int __tmp158 = f_tmp_185;
		t__T[] f_tmp_187 = intLib.toSignals(__tmp158, 32);
		t__T f_tmp_186 = intLib.eq(funct, f_tmp_187);
		t__T __tmp159 = f_tmp_186;
		t__T f_tmp_188 = intLib.and(__tmp157,__tmp159);
		t__T __tmp160 = f_tmp_188;
		int f_tmp_189 = 4;
		int __tmp161 = f_tmp_189;
		t__T[] f_tmp_191 = intLib.toSignals(__tmp161, 32);
		t__T[] f_tmp_190 = intLib.add(pc,f_tmp_191);
		t__T[] __tmp162 = f_tmp_190;
		t__T[] __tmp163 = intLib.mux(reg_rd, __tmp162,__tmp160);
		reg_rd = __tmp163;
		t__T f_tmp_193 = intLib.not(__tmp94);
		t__T __tmp164 = f_tmp_193;
		t__T f_tmp_194 = intLib.and(__tmp92,__tmp164);
		t__T __tmp165 = f_tmp_194;
		t__T[] __tmp166 = intLib.mux(oldPC, pc,__tmp165);
		oldPC = __tmp166;
		int f_tmp_196 = 3;
		int __tmp167 = f_tmp_196;
		t__T[] f_tmp_198 = intLib.toSignals(__tmp167, 32);
		t__T f_tmp_197 = intLib.eq(op, f_tmp_198);
		t__T __tmp168 = f_tmp_197;
		t__T f_tmp_199 = intLib.and(__tmp165,__tmp168);
		t__T __tmp169 = f_tmp_199;
		int f_tmp_200 = 6;
		int __tmp170 = f_tmp_200;
		t__T[] f_tmp_201 = intLib.leftPublicShift(inst, __tmp170);
		t__T[] __tmp171 = f_tmp_201;
		int f_tmp_202 = 6;
		int __tmp172 = f_tmp_202;
		t__T[] f_tmp_203 = intLib.rightPublicShift(__tmp171, __tmp172);
		t__T[] __tmp173 = f_tmp_203;
		t__T[] __tmp174 = intLib.mux(pc, __tmp173,__tmp169);
		pc = __tmp174;
		t__T f_tmp_205 = intLib.not(__tmp168);
		t__T __tmp175 = f_tmp_205;
		t__T f_tmp_206 = intLib.and(__tmp165,__tmp175);
		t__T __tmp176 = f_tmp_206;
		int f_tmp_207 = 1;
		int __tmp177 = f_tmp_207;
		t__T[] f_tmp_209 = intLib.toSignals(__tmp177, 32);
		t__T f_tmp_208 = intLib.eq(op, f_tmp_209);
		t__T __tmp178 = f_tmp_208;
		t__T f_tmp_210 = intLib.and(__tmp176,__tmp178);
		t__T __tmp179 = f_tmp_210;
		int f_tmp_211 = 0;
		int __tmp180 = f_tmp_211;
		t__T[] f_tmp_213 = intLib.toSignals(__tmp180, 32);
		t__T f_tmp_212 = intLib.geq(reg_rt, f_tmp_213);
		t__T __tmp181 = f_tmp_212;
		t__T f_tmp_214 = intLib.and(__tmp179,__tmp181);
		t__T __tmp182 = f_tmp_214;
		int f_tmp_215 = 2;
		int __tmp183 = f_tmp_215;
		t__T[] f_tmp_216 = intLib.leftPublicShift(unsignExt, __tmp183);
		t__T[] __tmp184 = f_tmp_216;
		t__T[] f_tmp_217 = intLib.add(pc,__tmp184);
		t__T[] __tmp185 = f_tmp_217;
		t__T[] __tmp186 = intLib.mux(pc, __tmp185,__tmp182);
		pc = __tmp186;
		int f_tmp_219 = 3;
		int __tmp187 = f_tmp_219;
		t__T[] f_tmp_221 = intLib.toSignals(__tmp187, 32);
		t__T f_tmp_220 = intLib.eq(op, f_tmp_221);
		t__T __tmp188 = f_tmp_220;
		int f_tmp_222 = 1;
		int __tmp189 = f_tmp_222;
		t__T[] f_tmp_224 = intLib.toSignals(__tmp189, 32);
		t__T f_tmp_223 = intLib.eq(op, f_tmp_224);
		t__T __tmp190 = f_tmp_223;
		t__T f_tmp_225 = intLib.or(__tmp188,__tmp190);
		t__T __tmp191 = f_tmp_225;
		t__T f_tmp_226 = intLib.and(__tmp165,__tmp191);
		t__T __tmp192 = f_tmp_226;
		int f_tmp_227 = 31;
		int __tmp193 = f_tmp_227;
		t__T[] f_tmp_229 = intLib.toSignals(__tmp193, 32);
		t__T[] __tmp194 = intLib.mux(n31, f_tmp_229,__tmp192);
		n31 = __tmp194;
		int f_tmp_230 = 8;
		int __tmp195 = f_tmp_230;
		t__T[] f_tmp_232 = intLib.toSignals(__tmp195, 32);
		t__T[] f_tmp_231 = intLib.add(oldPC,f_tmp_232);
		t__T[] __tmp196 = f_tmp_231;
		t__T[] __tmp197 = intLib.mux(tmpdata, __tmp196,__tmp192);
		tmpdata = __tmp197;
		reg.write(n31, tmpdata, ff, terminationBit);
		int f_tmp_235 = 0;
		int __tmp199 = f_tmp_235;
		t__T[] f_tmp_237 = intLib.toSignals(__tmp199, 32);
		t__T f_tmp_236 = intLib.eq(op, f_tmp_237);
		t__T __tmp200 = f_tmp_236;
		int f_tmp_238 = 8;
		int __tmp201 = f_tmp_238;
		t__T[] f_tmp_240 = intLib.toSignals(__tmp201, 32);
		t__T f_tmp_239 = intLib.eq(funct, f_tmp_240);
		t__T __tmp202 = f_tmp_239;
		t__T f_tmp_241 = intLib.and(__tmp200,__tmp202);
		t__T __tmp203 = f_tmp_241;
		t__T[] __tmp204 = intLib.mux(pc, reg_rs,__tmp203);
		pc = __tmp204;
		t__T f_tmp_243 = intLib.not(__tmp203);
		t__T __tmp205 = f_tmp_243;
		int f_tmp_244 = 3;
		int __tmp206 = f_tmp_244;
		t__T[] f_tmp_246 = intLib.toSignals(__tmp206, 32);
		t__T f_tmp_245 = intLib.eq(op, f_tmp_246);
		t__T __tmp207 = f_tmp_245;
		t__T f_tmp_247 = intLib.and(__tmp205,__tmp207);
		t__T __tmp208 = f_tmp_247;
		int f_tmp_248 = 6;
		int __tmp209 = f_tmp_248;
		t__T[] f_tmp_249 = intLib.leftPublicShift(inst, __tmp209);
		t__T[] __tmp210 = f_tmp_249;
		int f_tmp_250 = 6;
		int __tmp211 = f_tmp_250;
		t__T[] f_tmp_251 = intLib.rightPublicShift(__tmp210, __tmp211);
		t__T[] __tmp212 = f_tmp_251;
		t__T[] __tmp213 = intLib.mux(pc, __tmp212,__tmp208);
		pc = __tmp213;
		t__T f_tmp_253 = intLib.not(__tmp207);
		t__T __tmp214 = f_tmp_253;
		t__T f_tmp_254 = intLib.and(__tmp205,__tmp214);
		t__T __tmp215 = f_tmp_254;
		int f_tmp_255 = 5;
		int __tmp216 = f_tmp_255;
		t__T[] f_tmp_257 = intLib.toSignals(__tmp216, 32);
		t__T f_tmp_256 = intLib.eq(op, f_tmp_257);
		t__T __tmp217 = f_tmp_256;
		t__T f_tmp_258 = intLib.not(intLib.eq(reg_rs, reg_rt));
		t__T __tmp218 = f_tmp_258;
		t__T f_tmp_259 = intLib.and(__tmp217,__tmp218);
		t__T __tmp219 = f_tmp_259;
		int f_tmp_260 = 4;
		int __tmp220 = f_tmp_260;
		t__T[] f_tmp_262 = intLib.toSignals(__tmp220, 32);
		t__T f_tmp_261 = intLib.eq(op, f_tmp_262);
		t__T __tmp221 = f_tmp_261;
		t__T f_tmp_263 = intLib.eq(reg_rs, reg_rt);
		t__T __tmp222 = f_tmp_263;
		t__T f_tmp_264 = intLib.and(__tmp221,__tmp222);
		t__T __tmp223 = f_tmp_264;
		t__T f_tmp_265 = intLib.or(__tmp219,__tmp223);
		t__T __tmp224 = f_tmp_265;
		t__T f_tmp_266 = intLib.and(__tmp215,__tmp224);
		t__T __tmp225 = f_tmp_266;
		int f_tmp_267 = 4;
		int __tmp226 = f_tmp_267;
		t__T[] f_tmp_269 = intLib.toSignals(__tmp226, 32);
		t__T[] f_tmp_268 = intLib.add(pc,f_tmp_269);
		t__T[] __tmp227 = f_tmp_268;
		int f_tmp_270 = 2;
		int __tmp228 = f_tmp_270;
		t__T[] f_tmp_271 = intLib.leftPublicShift(unsignExt, __tmp228);
		t__T[] __tmp229 = f_tmp_271;
		t__T[] f_tmp_272 = intLib.add(__tmp227,__tmp229);
		t__T[] __tmp230 = f_tmp_272;
		t__T[] __tmp231 = intLib.mux(pc, __tmp230,__tmp225);
		pc = __tmp231;
		t__T f_tmp_274 = intLib.not(__tmp224);
		t__T __tmp232 = f_tmp_274;
		t__T f_tmp_275 = intLib.and(__tmp215,__tmp232);
		t__T __tmp233 = f_tmp_275;
		int f_tmp_276 = 4;
		int __tmp234 = f_tmp_276;
		t__T[] f_tmp_278 = intLib.toSignals(__tmp234, 32);
		t__T[] f_tmp_277 = intLib.add(pc,f_tmp_278);
		t__T[] __tmp235 = f_tmp_277;
		t__T[] __tmp236 = intLib.mux(pc, __tmp235,__tmp233);
		pc = __tmp236;
		to_write_index = rt;
		to_write_content = reg_rt;
		int f_tmp_280 = 1;
		int __tmp237 = f_tmp_280;
		t__T[] f_tmp_282 = intLib.toSignals(__tmp237, 2);
		t__T f_tmp_281 = intLib.eq(op_type, f_tmp_282);
		t__T __tmp238 = f_tmp_281;
		t__T[] __tmp239 = intLib.mux(to_write_index, rd,__tmp238);
		to_write_index = __tmp239;
		t__T[] __tmp240 = intLib.mux(to_write_content, reg_rd,__tmp238);
		to_write_content = __tmp240;
		reg.write(to_write_index, to_write_content, ff, terminationBit);
		return pc;

	}
}
