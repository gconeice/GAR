package compiledlib.dov;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.SecureMap;
import oram.CircuitOram;
import oram.Register;
import oram.Memory;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.Comparator;
import java.lang.reflect.Array;
import flexsc.IWritable;
public class MEM<t__T> implements flexsc.IWritable<MEM<t__T>, t__T> {

	public CompEnv<t__T> env;
	public IntegerLib<t__T> intLib;
	public FloatLib<t__T> floatLib;

	public MEM(CompEnv<t__T> env) throws Exception {
		this.env = env;
		this.intLib = new IntegerLib<t__T>(env);
		this.floatLib = new FloatLib<t__T>(env, 24, 8);
	}

	public int numBits() {
		return 0;
	}
	public t__T[] getBits() {
		t__T[] ret = env.newTArray(this.numBits());
		t__T[] tmp_b;
		t__T tmp;
		int now = 0;
		return ret;
}

	public MEM<t__T> newObj(t__T[] data) throws Exception {
		if(data == null) {
			data = env.newTArray(this.numBits());
			for(int i=0; i<this.numBits(); ++i) { data[i] = intLib.SIGNAL_ZERO; }
		}
		if(data.length != this.numBits()) return null;
		MEM<t__T> ret = new MEM<t__T>(env);
		t__T[] tmp;
		int now = 0;
		return ret;
}

	public t__T[] getInst(SecureMap<t__T> instBank, t__T[] pc, int pcOffset) throws Exception {
		t__T[] newInst = intLib.toSignals(0, 32);
		t__T[] f_tmp_0 = instBank.read(pc);
		t__T[] __tmp0 = f_tmp_0;
		newInst = __tmp0;
		return newInst;

	}
	public void func(Register<t__T> reg, Memory<t__T> mem, t__T[] inst, int dataOffset, t__T terminationBit, int operationMask, int masks0, int masks1) throws Exception {
		t__T[] rt = intLib.toSignals(0, 32);
		t__T[] rs = intLib.toSignals(0, 32);
		t__T[] unsignExt = intLib.toSignals(0, 32);
		t__T[] op = intLib.toSignals(0, 32);
		t__T[] tmpAddress = intLib.toSignals(0, 32);
		t__T[] tmpindex = intLib.toSignals(0, 32);
		t__T[] mem_tmp_r = intLib.toSignals(0, 32);
		t__T[] reg_rt_r = intLib.toSignals(0, 32);
		t__T[] mem_tmp_w = intLib.toSignals(0, 32);
		t__T[] reg_rt_w = intLib.toSignals(0, 32);
		t__T[] tempRT = intLib.toSignals(0, 32);
		t__T[] byteShiftTwo = intLib.toSignals(0, 32);
		t__T[] byteShiftOne = intLib.toSignals(0, 32);
		int f_tmp_1 = 11;
		int __tmp1 = f_tmp_1;
		t__T[] f_tmp_2 = intLib.leftPublicShift(inst, __tmp1);
		t__T[] __tmp2 = f_tmp_2;
		int f_tmp_3 = 27;
		int __tmp3 = f_tmp_3;
		t__T[] f_tmp_4 = intLib.rightPublicShift(__tmp2, __tmp3);
		t__T[] __tmp4 = f_tmp_4;
		rt = __tmp4;
		int f_tmp_5 = 6;
		int __tmp5 = f_tmp_5;
		t__T[] f_tmp_6 = intLib.leftPublicShift(inst, __tmp5);
		t__T[] __tmp6 = f_tmp_6;
		int f_tmp_7 = 27;
		int __tmp7 = f_tmp_7;
		t__T[] f_tmp_8 = intLib.rightPublicShift(__tmp6, __tmp7);
		t__T[] __tmp8 = f_tmp_8;
		rs = __tmp8;
		int f_tmp_9 = 16;
		int __tmp9 = f_tmp_9;
		t__T[] f_tmp_10 = intLib.leftPublicShift(inst, __tmp9);
		t__T[] __tmp10 = f_tmp_10;
		int f_tmp_11 = 16;
		int __tmp11 = f_tmp_11;
		t__T[] f_tmp_12 = intLib.rightPublicShift(__tmp10, __tmp11);
		t__T[] __tmp12 = f_tmp_12;
		unsignExt = __tmp12;
		int f_tmp_13 = 15;
		int __tmp13 = f_tmp_13;
		t__T[] f_tmp_14 = intLib.rightPublicShift(unsignExt, __tmp13);
		t__T[] __tmp14 = f_tmp_14;
		int f_tmp_15 = 1;
		int __tmp15 = f_tmp_15;
		t__T[] f_tmp_17 = intLib.toSignals(__tmp15, 32);
		t__T f_tmp_16 = intLib.eq(__tmp14, f_tmp_17);
		t__T __tmp16 = f_tmp_16;
		int f_tmp_18 = -65536;
		int __tmp17 = f_tmp_18;
		t__T[] f_tmp_20 = intLib.toSignals(__tmp17, 32);
		t__T[] f_tmp_19 = intLib.add(unsignExt,f_tmp_20);
		t__T[] __tmp18 = f_tmp_19;
		t__T[] __tmp19 = intLib.mux(unsignExt, __tmp18,__tmp16);
		unsignExt = __tmp19;
		int f_tmp_22 = 26;
		int __tmp20 = f_tmp_22;
		t__T[] f_tmp_23 = intLib.rightPublicShift(inst, __tmp20);
		t__T[] __tmp21 = f_tmp_23;
		op = __tmp21;
		t__T[] f_tmp_24 = reg.read(rs, masks0);
		t__T[] __tmp22 = f_tmp_24;
		t__T[] f_tmp_25 = intLib.add(__tmp22,unsignExt);
		t__T[] __tmp23 = f_tmp_25;
		t__T[] f_tmp_27 = intLib.toSignals(dataOffset, 32);
		t__T[] f_tmp_26 = intLib.sub(__tmp23,f_tmp_27);
		t__T[] __tmp24 = f_tmp_26;
		tmpAddress = __tmp24;
		int f_tmp_28 = 2;
		int __tmp25 = f_tmp_28;
		t__T[] f_tmp_29 = intLib.rightPublicShift(tmpAddress, __tmp25);
		t__T[] __tmp26 = f_tmp_29;
		tmpindex = __tmp26;
		t__T[] f_tmp_30 = mem.read(tmpindex, operationMask);
		t__T[] __tmp27 = f_tmp_30;
		mem_tmp_r = __tmp27;
		t__T[] f_tmp_31 = reg.read(rt, masks1);
		t__T[] __tmp28 = f_tmp_31;
		reg_rt_r = __tmp28;
		mem_tmp_w = mem_tmp_r;
		reg_rt_w = reg_rt_r;
		tempRT = mem_tmp_r;
		int f_tmp_32 = 30;
		int __tmp29 = f_tmp_32;
		t__T[] f_tmp_33 = intLib.leftPublicShift(tmpAddress, __tmp29);
		t__T[] __tmp30 = f_tmp_33;
		int f_tmp_34 = 31;
		int __tmp31 = f_tmp_34;
		t__T[] f_tmp_35 = intLib.rightPublicShift(__tmp30, __tmp31);
		t__T[] __tmp32 = f_tmp_35;
		byteShiftTwo = __tmp32;
		int f_tmp_36 = 31;
		int __tmp33 = f_tmp_36;
		t__T[] f_tmp_37 = intLib.leftPublicShift(tmpAddress, __tmp33);
		t__T[] __tmp34 = f_tmp_37;
		int f_tmp_38 = 31;
		int __tmp35 = f_tmp_38;
		t__T[] f_tmp_39 = intLib.rightPublicShift(__tmp34, __tmp35);
		t__T[] __tmp36 = f_tmp_39;
		byteShiftOne = __tmp36;
		int f_tmp_40 = 35;
		int __tmp37 = f_tmp_40;
		t__T[] f_tmp_42 = intLib.toSignals(__tmp37, 32);
		t__T f_tmp_41 = intLib.eq(op, f_tmp_42);
		t__T __tmp38 = f_tmp_41;
		t__T[] __tmp39 = intLib.mux(reg_rt_w, mem_tmp_r,__tmp38);
		reg_rt_w = __tmp39;
		t__T f_tmp_44 = intLib.not(__tmp38);
		t__T __tmp40 = f_tmp_44;
		int f_tmp_45 = 43;
		int __tmp41 = f_tmp_45;
		t__T[] f_tmp_47 = intLib.toSignals(__tmp41, 32);
		t__T f_tmp_46 = intLib.eq(op, f_tmp_47);
		t__T __tmp42 = f_tmp_46;
		t__T f_tmp_48 = intLib.and(__tmp40,__tmp42);
		t__T __tmp43 = f_tmp_48;
		t__T[] __tmp44 = intLib.mux(mem_tmp_w, reg_rt_r,__tmp43);
		mem_tmp_w = __tmp44;
		t__T f_tmp_50 = intLib.not(__tmp42);
		t__T __tmp45 = f_tmp_50;
		t__T f_tmp_51 = intLib.and(__tmp40,__tmp45);
		t__T __tmp46 = f_tmp_51;
		int f_tmp_52 = 32;
		int __tmp47 = f_tmp_52;
		t__T[] f_tmp_54 = intLib.toSignals(__tmp47, 32);
		t__T f_tmp_53 = intLib.eq(op, f_tmp_54);
		t__T __tmp48 = f_tmp_53;
		t__T f_tmp_55 = intLib.and(__tmp46,__tmp48);
		t__T __tmp49 = f_tmp_55;
		int f_tmp_56 = 0;
		int __tmp50 = f_tmp_56;
		t__T[] f_tmp_58 = intLib.toSignals(__tmp50, 32);
		t__T f_tmp_57 = intLib.not(intLib.eq(byteShiftTwo, f_tmp_58));
		t__T __tmp51 = f_tmp_57;
		int f_tmp_59 = 0;
		int __tmp52 = f_tmp_59;
		t__T[] f_tmp_61 = intLib.toSignals(__tmp52, 32);
		t__T f_tmp_60 = intLib.not(intLib.eq(byteShiftOne, f_tmp_61));
		t__T __tmp53 = f_tmp_60;
		t__T f_tmp_62 = intLib.and(__tmp51,__tmp53);
		t__T __tmp54 = f_tmp_62;
		t__T f_tmp_63 = intLib.and(__tmp49,__tmp54);
		t__T __tmp55 = f_tmp_63;
		int f_tmp_64 = 24;
		int __tmp56 = f_tmp_64;
		t__T[] f_tmp_65 = intLib.leftPublicShift(tempRT, __tmp56);
		t__T[] __tmp57 = f_tmp_65;
		int f_tmp_66 = 24;
		int __tmp58 = f_tmp_66;
		t__T[] f_tmp_67 = intLib.rightPublicShift(__tmp57, __tmp58);
		t__T[] __tmp59 = f_tmp_67;
		t__T[] __tmp60 = intLib.mux(tempRT, __tmp59,__tmp55);
		tempRT = __tmp60;
		t__T f_tmp_69 = intLib.not(__tmp54);
		t__T __tmp61 = f_tmp_69;
		t__T f_tmp_70 = intLib.and(__tmp49,__tmp61);
		t__T __tmp62 = f_tmp_70;
		int f_tmp_71 = 0;
		int __tmp63 = f_tmp_71;
		t__T[] f_tmp_73 = intLib.toSignals(__tmp63, 32);
		t__T f_tmp_72 = intLib.not(intLib.eq(byteShiftTwo, f_tmp_73));
		t__T __tmp64 = f_tmp_72;
		int f_tmp_74 = 0;
		int __tmp65 = f_tmp_74;
		t__T[] f_tmp_76 = intLib.toSignals(__tmp65, 32);
		t__T f_tmp_75 = intLib.eq(byteShiftOne, f_tmp_76);
		t__T __tmp66 = f_tmp_75;
		t__T f_tmp_77 = intLib.and(__tmp64,__tmp66);
		t__T __tmp67 = f_tmp_77;
		t__T f_tmp_78 = intLib.and(__tmp62,__tmp67);
		t__T __tmp68 = f_tmp_78;
		int f_tmp_79 = 16;
		int __tmp69 = f_tmp_79;
		t__T[] f_tmp_80 = intLib.leftPublicShift(tempRT, __tmp69);
		t__T[] __tmp70 = f_tmp_80;
		int f_tmp_81 = 24;
		int __tmp71 = f_tmp_81;
		t__T[] f_tmp_82 = intLib.rightPublicShift(__tmp70, __tmp71);
		t__T[] __tmp72 = f_tmp_82;
		t__T[] __tmp73 = intLib.mux(tempRT, __tmp72,__tmp68);
		tempRT = __tmp73;
		t__T f_tmp_84 = intLib.not(__tmp67);
		t__T __tmp74 = f_tmp_84;
		t__T f_tmp_85 = intLib.and(__tmp62,__tmp74);
		t__T __tmp75 = f_tmp_85;
		int f_tmp_86 = 0;
		int __tmp76 = f_tmp_86;
		t__T[] f_tmp_88 = intLib.toSignals(__tmp76, 32);
		t__T f_tmp_87 = intLib.eq(byteShiftTwo, f_tmp_88);
		t__T __tmp77 = f_tmp_87;
		int f_tmp_89 = 0;
		int __tmp78 = f_tmp_89;
		t__T[] f_tmp_91 = intLib.toSignals(__tmp78, 32);
		t__T f_tmp_90 = intLib.not(intLib.eq(byteShiftOne, f_tmp_91));
		t__T __tmp79 = f_tmp_90;
		t__T f_tmp_92 = intLib.and(__tmp77,__tmp79);
		t__T __tmp80 = f_tmp_92;
		t__T f_tmp_93 = intLib.and(__tmp75,__tmp80);
		t__T __tmp81 = f_tmp_93;
		int f_tmp_94 = 8;
		int __tmp82 = f_tmp_94;
		t__T[] f_tmp_95 = intLib.leftPublicShift(tempRT, __tmp82);
		t__T[] __tmp83 = f_tmp_95;
		int f_tmp_96 = 24;
		int __tmp84 = f_tmp_96;
		t__T[] f_tmp_97 = intLib.rightPublicShift(__tmp83, __tmp84);
		t__T[] __tmp85 = f_tmp_97;
		t__T[] __tmp86 = intLib.mux(tempRT, __tmp85,__tmp81);
		tempRT = __tmp86;
		t__T f_tmp_99 = intLib.not(__tmp80);
		t__T __tmp87 = f_tmp_99;
		t__T f_tmp_100 = intLib.and(__tmp75,__tmp87);
		t__T __tmp88 = f_tmp_100;
		int f_tmp_101 = 0;
		int __tmp89 = f_tmp_101;
		t__T[] f_tmp_103 = intLib.toSignals(__tmp89, 32);
		t__T f_tmp_102 = intLib.eq(byteShiftTwo, f_tmp_103);
		t__T __tmp90 = f_tmp_102;
		int f_tmp_104 = 0;
		int __tmp91 = f_tmp_104;
		t__T[] f_tmp_106 = intLib.toSignals(__tmp91, 32);
		t__T f_tmp_105 = intLib.eq(byteShiftOne, f_tmp_106);
		t__T __tmp92 = f_tmp_105;
		t__T f_tmp_107 = intLib.and(__tmp90,__tmp92);
		t__T __tmp93 = f_tmp_107;
		t__T f_tmp_108 = intLib.and(__tmp88,__tmp93);
		t__T __tmp94 = f_tmp_108;
		int f_tmp_109 = 24;
		int __tmp95 = f_tmp_109;
		t__T[] f_tmp_110 = intLib.rightPublicShift(tempRT, __tmp95);
		t__T[] __tmp96 = f_tmp_110;
		t__T[] __tmp97 = intLib.mux(tempRT, __tmp96,__tmp94);
		tempRT = __tmp97;
		t__T[] __tmp98 = intLib.mux(reg_rt_w, tempRT,__tmp49);
		reg_rt_w = __tmp98;
		reg.write(rt, reg_rt_w, masks1, terminationBit);
		mem.conditionalWrite(tmpindex, mem_tmp_w, terminationBit, operationMask);

	}
}
